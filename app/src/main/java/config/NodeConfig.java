// Code generated by gobind. DO NOT EDIT.

// Java class config.NodeConfig is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/yggdrasil-network/yggdrasil-go/src/config
package config;

import go.Seq;

/**
 * NodeConfig is the main configuration structure, containing configuration
options that are necessary for an Yggdrasil node to run. You will need to
supply one of these structs to the Yggdrasil core when starting a node.
 */
public final class NodeConfig implements Seq.Proxy {
	static { Config.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	NodeConfig(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	public NodeConfig() { this.refnum = __New(); Seq.trackGoRef(refnum, this); }
	
	private static native int __New();
	
	// skipped field NodeConfig.Peers with unsupported type: []string
	
	// skipped field NodeConfig.InterfacePeers with unsupported type: map[string][]string
	
	// skipped field NodeConfig.Listen with unsupported type: []string
	
	public final native String getAdminListen();
	public final native void setAdminListen(String v);
	
	// skipped field NodeConfig.MulticastInterfaces with unsupported type: []string
	
	// skipped field NodeConfig.AllowedEncryptionPublicKeys with unsupported type: []string
	
	public final native String getEncryptionPublicKey();
	public final native void setEncryptionPublicKey(String v);
	
	public final native String getEncryptionPrivateKey();
	public final native void setEncryptionPrivateKey(String v);
	
	public final native String getSigningPublicKey();
	public final native void setSigningPublicKey(String v);
	
	public final native String getSigningPrivateKey();
	public final native void setSigningPrivateKey(String v);
	
	// skipped field NodeConfig.LinkLocalTCPPort with unsupported type: uint16
	
	public final native String getIfName();
	public final native void setIfName(String v);
	
	// skipped field NodeConfig.IfMTU with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/types.MTU
	
	// skipped field NodeConfig.SessionFirewall with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.SessionFirewall
	
	// skipped field NodeConfig.TunnelRouting with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.TunnelRouting
	
	// skipped field NodeConfig.SwitchOptions with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.SwitchOptions
	
	public final native boolean getNodeInfoPrivacy();
	public final native void setNodeInfoPrivacy(boolean v);
	
	// skipped field NodeConfig.NodeInfo with unsupported type: map[string]interface{}
	
	/**
	 * NewEncryptionKeys replaces the encryption keypair in the NodeConfig with a
	new encryption keypair. The encryption keys are used by the router to encrypt
	traffic and to derive the node ID and IPv6 address/subnet of the node, so
	this is equivalent to discarding the node&#39;s identity on the network.
	 */
	public native void newEncryptionKeys();
	/**
	 * NewSigningKeys replaces the signing keypair in the NodeConfig with a new
	signing keypair. The signing keys are used by the switch to derive the
	structure of the spanning tree.
	 */
	public native void newSigningKeys();
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof NodeConfig)) {
		    return false;
		}
		NodeConfig that = (NodeConfig)o;
		// skipped field NodeConfig.Peers with unsupported type: []string
		
		// skipped field NodeConfig.InterfacePeers with unsupported type: map[string][]string
		
		// skipped field NodeConfig.Listen with unsupported type: []string
		
		String thisAdminListen = getAdminListen();
		String thatAdminListen = that.getAdminListen();
		if (thisAdminListen == null) {
			if (thatAdminListen != null) {
			    return false;
			}
		} else if (!thisAdminListen.equals(thatAdminListen)) {
		    return false;
		}
		// skipped field NodeConfig.MulticastInterfaces with unsupported type: []string
		
		// skipped field NodeConfig.AllowedEncryptionPublicKeys with unsupported type: []string
		
		String thisEncryptionPublicKey = getEncryptionPublicKey();
		String thatEncryptionPublicKey = that.getEncryptionPublicKey();
		if (thisEncryptionPublicKey == null) {
			if (thatEncryptionPublicKey != null) {
			    return false;
			}
		} else if (!thisEncryptionPublicKey.equals(thatEncryptionPublicKey)) {
		    return false;
		}
		String thisEncryptionPrivateKey = getEncryptionPrivateKey();
		String thatEncryptionPrivateKey = that.getEncryptionPrivateKey();
		if (thisEncryptionPrivateKey == null) {
			if (thatEncryptionPrivateKey != null) {
			    return false;
			}
		} else if (!thisEncryptionPrivateKey.equals(thatEncryptionPrivateKey)) {
		    return false;
		}
		String thisSigningPublicKey = getSigningPublicKey();
		String thatSigningPublicKey = that.getSigningPublicKey();
		if (thisSigningPublicKey == null) {
			if (thatSigningPublicKey != null) {
			    return false;
			}
		} else if (!thisSigningPublicKey.equals(thatSigningPublicKey)) {
		    return false;
		}
		String thisSigningPrivateKey = getSigningPrivateKey();
		String thatSigningPrivateKey = that.getSigningPrivateKey();
		if (thisSigningPrivateKey == null) {
			if (thatSigningPrivateKey != null) {
			    return false;
			}
		} else if (!thisSigningPrivateKey.equals(thatSigningPrivateKey)) {
		    return false;
		}
		// skipped field NodeConfig.LinkLocalTCPPort with unsupported type: uint16
		
		String thisIfName = getIfName();
		String thatIfName = that.getIfName();
		if (thisIfName == null) {
			if (thatIfName != null) {
			    return false;
			}
		} else if (!thisIfName.equals(thatIfName)) {
		    return false;
		}
		// skipped field NodeConfig.IfMTU with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/types.MTU
		
		// skipped field NodeConfig.SessionFirewall with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.SessionFirewall
		
		// skipped field NodeConfig.TunnelRouting with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.TunnelRouting
		
		// skipped field NodeConfig.SwitchOptions with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.SwitchOptions
		
		boolean thisNodeInfoPrivacy = getNodeInfoPrivacy();
		boolean thatNodeInfoPrivacy = that.getNodeInfoPrivacy();
		if (thisNodeInfoPrivacy != thatNodeInfoPrivacy) {
		    return false;
		}
		// skipped field NodeConfig.NodeInfo with unsupported type: map[string]interface{}
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {getAdminListen(), getEncryptionPublicKey(), getEncryptionPrivateKey(), getSigningPublicKey(), getSigningPrivateKey(), getIfName(), getNodeInfoPrivacy()});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("NodeConfig").append("{");
		b.append("AdminListen:").append(getAdminListen()).append(",");
		b.append("EncryptionPublicKey:").append(getEncryptionPublicKey()).append(",");
		b.append("EncryptionPrivateKey:").append(getEncryptionPrivateKey()).append(",");
		b.append("SigningPublicKey:").append(getSigningPublicKey()).append(",");
		b.append("SigningPrivateKey:").append(getSigningPrivateKey()).append(",");
		b.append("IfName:").append(getIfName()).append(",");
		b.append("NodeInfoPrivacy:").append(getNodeInfoPrivacy()).append(",");
		return b.append("}").toString();
	}
}

