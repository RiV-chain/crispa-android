// Code generated by gobind. DO NOT EDIT.

// Java class yggdrasil.Conn is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/yggdrasil-network/yggdrasil-go/src/yggdrasil
package yggdrasil;

import go.Seq;

/**
 * The Conn struct is a reference to an active connection session between the
local node and a remote node. Conn implements the io.ReadWriteCloser
interface and is used to send and receive traffic with a remote node.
 */
public final class Conn implements Seq.Proxy {
	static { Yggdrasil.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	Conn(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	public Conn() { this.refnum = __New(); Seq.trackGoRef(refnum, this); }
	
	private static native int __New();
	
	// skipped field Conn.Inbox with unsupported type: github.com/Arceliar/phony.Inbox
	
	// skipped method Conn.Act with unsupported parameter or return types
	
	/**
	 * Close will close an open connection and any blocking operations on the
	connection will unblock and return. From this point forward, the connection
	can no longer be used and you should no longer attempt to Read or Write to
	the connection.
	 */
	public native void close() throws Exception;
	// skipped method Conn.LocalAddr with unsupported parameter or return types
	
	/**
	 * Read allows you to read from the connection in a synchronous fashion. The
	function will block up until the point that either new data is available, the
	connection has been closed or the read deadline has been reached. If the
	function succeeds, the number of bytes read from the connection will be
	returned. Otherwise, an error condition will be returned.
	
	Note that you can also implement asynchronous reads by using SetReadCallback.
	If you do that, you should no longer attempt to use the Read function.
	 */
	public native long read(byte[] b) throws Exception;
	// skipped method Conn.RemoteAddr with unsupported parameter or return types
	
	// skipped method Conn.SetDeadline with unsupported parameter or return types
	
	// skipped method Conn.SetReadCallback with unsupported parameter or return types
	
	// skipped method Conn.SetReadDeadline with unsupported parameter or return types
	
	// skipped method Conn.SetWriteDeadline with unsupported parameter or return types
	
	/**
	 * String returns a string that uniquely identifies a connection. Currently this
	takes a form similar to &#34;conn=0x0000000&#34;, which contains a memory reference
	to the Conn object. While this value should always be unique for each Conn
	object, the format of this is not strictly defined and may change in the
	future.
	 */
	public native String string();
	/**
	 * Write allows you to write to the connection in a synchronous fashion. This
	function may block until either the write has completed, the connection has
	been closed or the write deadline has been reached. If the function succeeds,
	the number of written bytes is returned. Otherwise, an error condition is
	returned.
	 */
	public native long write(byte[] b) throws Exception;
	// skipped method Conn.WriteFrom with unsupported parameter or return types
	
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof Conn)) {
		    return false;
		}
		Conn that = (Conn)o;
		// skipped field Conn.Inbox with unsupported type: github.com/Arceliar/phony.Inbox
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {});
	}
	
	@Override public String toString() {
		return string();
	}
}

