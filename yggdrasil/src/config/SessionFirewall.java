// Code generated by gobind. DO NOT EDIT.

// Java class config.SessionFirewall is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/yggdrasil-network/yggdrasil-go/src/config
package config;

import go.Seq;

/**
 * SessionFirewall controls the session firewall configuration.
 */
public final class SessionFirewall implements Seq.Proxy {
	static { Config.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	SessionFirewall(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	public SessionFirewall() { this.refnum = __New(); Seq.trackGoRef(refnum, this); }
	
	private static native int __New();
	
	public final native boolean getEnable();
	public final native void setEnable(boolean v);
	
	public final native boolean getAllowFromDirect();
	public final native void setAllowFromDirect(boolean v);
	
	public final native boolean getAllowFromRemote();
	public final native void setAllowFromRemote(boolean v);
	
	public final native boolean getAlwaysAllowOutbound();
	public final native void setAlwaysAllowOutbound(boolean v);
	
	// skipped field SessionFirewall.WhitelistEncryptionPublicKeys with unsupported type: []string
	
	// skipped field SessionFirewall.BlacklistEncryptionPublicKeys with unsupported type: []string
	
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof SessionFirewall)) {
		    return false;
		}
		SessionFirewall that = (SessionFirewall)o;
		boolean thisEnable = getEnable();
		boolean thatEnable = that.getEnable();
		if (thisEnable != thatEnable) {
		    return false;
		}
		boolean thisAllowFromDirect = getAllowFromDirect();
		boolean thatAllowFromDirect = that.getAllowFromDirect();
		if (thisAllowFromDirect != thatAllowFromDirect) {
		    return false;
		}
		boolean thisAllowFromRemote = getAllowFromRemote();
		boolean thatAllowFromRemote = that.getAllowFromRemote();
		if (thisAllowFromRemote != thatAllowFromRemote) {
		    return false;
		}
		boolean thisAlwaysAllowOutbound = getAlwaysAllowOutbound();
		boolean thatAlwaysAllowOutbound = that.getAlwaysAllowOutbound();
		if (thisAlwaysAllowOutbound != thatAlwaysAllowOutbound) {
		    return false;
		}
		// skipped field SessionFirewall.WhitelistEncryptionPublicKeys with unsupported type: []string
		
		// skipped field SessionFirewall.BlacklistEncryptionPublicKeys with unsupported type: []string
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {getEnable(), getAllowFromDirect(), getAllowFromRemote(), getAlwaysAllowOutbound()});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("SessionFirewall").append("{");
		b.append("Enable:").append(getEnable()).append(",");
		b.append("AllowFromDirect:").append(getAllowFromDirect()).append(",");
		b.append("AllowFromRemote:").append(getAllowFromRemote()).append(",");
		b.append("AlwaysAllowOutbound:").append(getAlwaysAllowOutbound()).append(",");
		return b.append("}").toString();
	}
}

