// Code generated by gobind. DO NOT EDIT.

// Java class config.NodeState is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/yggdrasil-network/yggdrasil-go/src/config
package config;

import go.Seq;

/**
 * NodeState represents the active and previous configuration of an Yggdrasil
node. A NodeState object is returned when starting an Yggdrasil node. Note
that this structure and related functions are likely to disappear soon.
 */
public final class NodeState implements Seq.Proxy {
	static { Config.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	NodeState(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	public NodeState() { this.refnum = __New(); Seq.trackGoRef(refnum, this); }
	
	private static native int __New();
	
	// skipped field NodeState.Current with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.NodeConfig
	
	// skipped field NodeState.Previous with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.NodeConfig
	
	// skipped field NodeState.Mutex with unsupported type: sync.RWMutex
	
	// skipped method NodeState.GetCurrent with unsupported parameter or return types
	
	// skipped method NodeState.GetPrevious with unsupported parameter or return types
	
	// skipped method NodeState.Replace with unsupported parameter or return types
	
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof NodeState)) {
		    return false;
		}
		NodeState that = (NodeState)o;
		// skipped field NodeState.Current with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.NodeConfig
		
		// skipped field NodeState.Previous with unsupported type: github.com/yggdrasil-network/yggdrasil-go/src/config.NodeConfig
		
		// skipped field NodeState.Mutex with unsupported type: sync.RWMutex
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("NodeState").append("{");
		return b.append("}").toString();
	}
}

